library(datasets)
data(iris)
iris
tapply(iris$Sepal.Length , iris$Species, mean) 
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
apply(mtcars, 2, mean)
sapply(mtcars, cyl, mean)
mtcars
tapply(mtcars$hp, mtcars$cyl)
tapply(mtcars$hp, mtcars$cyl, mean)
hpc <- tapply(mtcars$hp, mtcars$cyl, mean)
hpc
hpc[3] - hpc[1]
?ls
ls iris
ls(iris)
ls(hpc)
ls(mtcars)
myfunc <- function() {y <- 1; ls()}
myfunc()
ls(hpc)
debug(ls(hpc))
debug(ls)
ls(hpc)
n
2
3
4
n
n
n
n
n
tapply(iris$Sepal.Length , iris$Species, mean) 
apply(iris[, 1:4], 2, mean)
mean(mtcars$mpg, mtcars$cyl) 
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcar$hs , mtcars$cyl, mean) 
tapply(mtcars$hs , mtcars$cyl, mean) 
tapply(mtcars$hp, mtcars$cyl, mean)
hpc[3] - hpc[1]
makeVector <- function(x = numeric()) {
        m <- NULL
        set <- function(y) {
                x <<- y
                m <<- NULL
        }
        get <- function() x
        setmean <- function(mean) m <<- mean
        getmean <- function() m
        list(set = set, get = get,
             setmean = setmean,
             getmean = getmean)
}
makeVector(4)
z <- makeVector(4)
z
cachemean <- function(x, ...) {
        m <- x$getmean()
        if(!is.null(m)) {
                message("getting cached data")
                return(m)
        }
        data <- x$get()
        m <- mean(data, ...)
        x$setmean(m)
        m
}
cachemean(4)
cachemean(4)
cachemean(z)
x <- c(4,5,6)
makeVector(x)
y <- makeVector(x)
cachemean(y)
getwd()
setwd("C:\\Users\\Ruiming\\Desktop\\ProgrammingAssignment2")
cachemean(5)
cachemean(5:6)
cachemean(y)
makeVector(5:6)
y<-makeVector(5:6)
y
cachemean(y)
q()
